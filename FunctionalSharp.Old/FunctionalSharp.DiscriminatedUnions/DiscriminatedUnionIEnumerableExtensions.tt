<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace FunctionalSharp.DiscriminatedUnions
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
<#
var maxNumberOfTypeArguments = 10;
#>
	/// <summary>
	/// Provides extension methods to the IEnumerable of DiscriminatedUnion.
	/// </summary>
	public static class DiscriminatedUnionIEnumerableExtensions
	{
<#		
for(var numberOfArguments = 2; numberOfArguments <= maxNumberOfTypeArguments -1; numberOfArguments +=1)
{
#>
		/// <summary>
		/// Matches the specific types and executes the given action for them.
		/// </summary>
		/// <typeparam name="TUnion">TUnion</typeparam>
<#= TypeParamsFor(numberOfArguments) #>
<#= CommentsFor("		/// <param name=\"Action{0}\">Action to run for Type{0}</param>",numberOfArguments) #>
		/// <param name="values">existing Discriminated unions</param>
		public static void Match<TUnion,<#= TypeArgumentsFor(numberOfArguments) #>>(this IEnumerable<TUnion> values,  <#= ActionArgumentsFor(numberOfArguments) #>)
		where TUnion : DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments) #>>
		{
			foreach(var item in values)
			{
				item.Match(
<#for(var i = 0; i < numberOfArguments -1; i +=1)
{
#>
				type<#= i + 1 #>Item => Action<#= i + 1 #>(type<#= i + 1 #>Item),
<#
}
#>
				type<#= numberOfArguments #>Item => Action<#= numberOfArguments #>(type<#= numberOfArguments #>Item));
			}
		}

				/// <summary>
		/// Matches the specific types and uses the given functions to tranform into s ingle returntype.
		/// </summary>
		/// <typeparam name="TUnion">TUnion</typeparam>
<#= TypeParamsFor(numberOfArguments) #>
		/// <typeparam name="ReturnType">the returntype for all functions</typeparam>
<#= CommentsFor("		/// <param name=\"Function{0}\">Function to run for Type{0}</param>",numberOfArguments) #>
		/// <param name="values">existing Discriminated unions</param>
		public static IEnumerable<ReturnType> Match<TUnion,<#= TypeArgumentsFor(numberOfArguments) #>, ReturnType>(this IEnumerable<TUnion> values,<#= FunctionArgumentsFor(numberOfArguments) #>)
			where TUnion : DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments) #>>
		{
			foreach(var item in values)
			{
				yield return item.Match(
				<#for(var i = 0; i < numberOfArguments -1; i +=1)
{
#>
				type<#= i + 1 #>Item => Function<#= i + 1 #>(type<#= i + 1 #>Item),
<#
}
#>
				type<#= numberOfArguments #>Item => Function<#= numberOfArguments #>(type<#= numberOfArguments #>Item));
			}
		}

		/// <summary>
		/// Matches the specific types and executes the given action for them.
		/// </summary>
<#= TypeParamsFor(numberOfArguments) #>
<#= CommentsFor("		/// <param name=\"Action{0}\">Action to run for Type{0}</param>",numberOfArguments) #>
		/// <param name="values">existing Discriminated unions</param>
		public static void Match<<#= TypeArgumentsFor(numberOfArguments) #>>(this IEnumerable<DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments) #>>> values,  <#= ActionArgumentsFor(numberOfArguments) #>)
		{
			foreach(var item in values)
			{
				item.Match(
<#for(var i = 0; i < numberOfArguments -1; i +=1)
{
#>
				type<#= i + 1 #>Item => Action<#= i + 1 #>(type<#= i + 1 #>Item),
<#
}
#>
				type<#= numberOfArguments #>Item => Action<#= numberOfArguments #>(type<#= numberOfArguments #>Item));
			}
		}

		/// <summary>
		/// Matches the specific types and uses the given functions to tranform into s ingle returntype.
		/// </summary>
<#= TypeParamsFor(numberOfArguments) #>
		/// <typeparam name="ReturnType">the returntype for all functions</typeparam>
<#= CommentsFor("		/// <param name=\"Function{0}\">Function to run for Type{0}</param>",numberOfArguments) #>
		/// <param name="values">existing Discriminated unions</param>
		public static IEnumerable<ReturnType> Match<<#= TypeArgumentsFor(numberOfArguments) #>, ReturnType>(this IEnumerable<DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments) #>>> values,<#= FunctionArgumentsFor(numberOfArguments) #>)
		{
			foreach(var item in values)
			{
				yield return item.Match(
				<#for(var i = 0; i < numberOfArguments -1; i +=1)
{
#>
				type<#= i + 1 #>Item => Function<#= i + 1 #>(type<#= i + 1 #>Item),
<#
}
#>
				type<#= numberOfArguments #>Item => Function<#= numberOfArguments #>(type<#= numberOfArguments #>Item));
			}
		}

		/// <summary>
		/// Merges the item into the existing discriminatedunions resulting in a new enumerable of discriminated unions with the type of the item as a new option.
		/// </summary>
<#= TypeParamsFor(numberOfArguments + 1) #>
		/// <param name="values">existing Discriminated unions</param>
		/// <param name="item"></param>
		/// <returns></returns>
		public static IEnumerable<DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments + 1) #>>> MergeItem<<#= TypeArgumentsFor(numberOfArguments + 1) #>>(this IEnumerable<DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments) #>>> values, Type<#= numberOfArguments + 1 #> item)
		{
			return values.Merge((IEnumerable<Type<#= numberOfArguments + 1#>>)new List<Type<#= numberOfArguments + 1#>>{ item });
		}

		/// <summary>
		/// Merges the item intos the existing discriminatedunions resulting in a new enumerable of discriminated unions with the type of the items as a new option.
		/// </summary>
<#= TypeParamsFor(numberOfArguments + 1) #>
		/// <param name="values">existing Discriminated unions</param>
		/// <param name="items"></param>
		/// <returns></returns>
		public static IEnumerable<DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments + 1) #>>> Merge<<#= TypeArgumentsFor(numberOfArguments + 1) #>>(this IEnumerable<DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments) #>>> values, IEnumerable<Type<#= numberOfArguments + 1 #>> items)
		{
			foreach (var item in values)
			{
				 yield return item.Match(
<#for(var i = 0; i < numberOfArguments -1; i +=1)
{
#>
					 type<#= i + 1 #>Item => new DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments + 1) #>>(type<#= i + 1 #>Item),
<#
}
#>
					 type<#= numberOfArguments #>Item => new DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments + 1) #>>(type<#= numberOfArguments #>Item));
			}
			foreach (var item in items)
			{
				yield return new DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments + 1) #>>(item);
			}
		}

				/// <summary>
		/// Merges to given collections into a discriminated union collection.
		/// </summary>
<#= TypeParamsFor(numberOfArguments) #>
<#for(var i = 0; i < numberOfArguments; i +=1)
		{
#>		/// <param name="type<#= i + 1 #>Values">a collection to merge</param>
<#
}
#>
		/// <returns>Discriminated unions of all types.</returns>
		public static IEnumerable<DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments) #>>> Merge<<#= TypeArgumentsFor(numberOfArguments) #>>(this IEnumerable<Type1> type1Values, <#= ArgumentsFor("IEnumerable<Type{0}> type{0}Values, ", numberOfArguments, 1)#>)
		{
<#
for(var i = 0; i < numberOfArguments; i +=1)
{
#>
			foreach (var type<#= i + 1 #>Value in type<#= i + 1 #>Values)
			{
				yield return new DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments) #>>(type<#= i + 1 #>Value);
			}
<#
}
#>
		}
<#
}
#>	}
}

<#@ include file="GenerationHelpers.txt" #>