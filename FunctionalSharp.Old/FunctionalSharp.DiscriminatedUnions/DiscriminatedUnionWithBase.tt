<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace FunctionalSharp.DiscriminatedUnions
{
	using System;
	using System.ComponentModel;
<#
var maxNumberOfTypeArguments = 10;
#>
<#
for(var numberOfArguments = 2; numberOfArguments <= maxNumberOfTypeArguments; numberOfArguments +=1)
{
#>
	/// <summary>
	/// A Discriminated union for <#= numberOfArguments #> types.
	/// </summary>
<#for(var i = 0; i < numberOfArguments; i +=1)
{
#>
	/// <typeparam name="Type<#= i + 1 #>">Type<#= i + 1 #></typeparam>
<#
}
#>    /// <typeparam name="BaseType"></typeparam>
	[Serializable]
	public class DiscriminatedUnionWithBase<<#= TypeArgumentsFor(numberOfArguments) #>, BaseType> : DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments) #>>
<#for(var i = 0; i < numberOfArguments; i +=1)
{
#>
		where Type<#= i+1 #> : BaseType 
<#
}
#>
	{
		/// <summary>
		/// Private constructor to support serialization.
		/// </summary>
		private DiscriminatedUnionWithBase() : base() { }
<#for(var i = 0; i < numberOfArguments; i +=1)
{
#>
		/// <summary>
		/// Creates a new Discriminated union of with <typeparamref name="Type<#= i + 1 #>"/>
		/// </summary>
		/// <param name="item"></param>
		public DiscriminatedUnionWithBase(Type<#= i+1 #> item) : base(item) { }
<#
}
#>

		/// <summary>
		/// Gets any type by returning the basetype.
		/// </summary>
		/// <returns>Any type as the BaseType</returns>
		public BaseType AnyType
		{
			get
			{
				switch (tag)
				{<#
for(var i = 0; i < numberOfArguments; i +=1)
{
#>
					case <#= i#>: return Item<#= i+1 #>;<#
}#>

					default: throw new System.NotSupportedException("Unrecognized tag value: " + tag);
				}
			}
		}
	}
<#
}
#>
}

<#@ include file="GenerationHelpers.txt" #>