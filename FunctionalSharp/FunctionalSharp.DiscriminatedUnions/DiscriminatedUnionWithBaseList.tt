<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace FunctionalSharp.DiscriminatedUnions
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
<#
var maxNumberOfTypeArguments = 10;
#>
<#
for(var numberOfArguments = 2; numberOfArguments <= maxNumberOfTypeArguments; numberOfArguments +=1)
{
#>
	/// <summary>
	/// Represents a list of Discriminated unions with a common baseclass. Using this list you can add items without having to specify the union type.
	/// </summary>
	[Serializable]
	public class DiscriminatedUnionWithBaseList<<#= TypeArgumentsFor(numberOfArguments) #>, BaseType> : List<DiscriminatedUnionWithBase<<#= TypeArgumentsFor(numberOfArguments) #>, BaseType>>
<#for(var i = 0; i < numberOfArguments; i +=1)
{
#>
		where Type<#= i+1 #> : BaseType 
<#
}
#>
	{
<#for(var i = 0; i < numberOfArguments; i +=1)
{
#>        
		/// <summary>
		/// Adds the object to the end of the DiscriminatedUnionList
		/// </summary>
		public void Add(Type<#= i + 1 #> item)
		{
			this.Add(new DiscriminatedUnionWithBase<<#= TypeArgumentsFor(numberOfArguments) #>, BaseType>(item));
		}

		/// <summary>
		/// Adds a Enumerable of items to the list.
		/// </summary>
		/// <param name="collectionToAdd">The items to add.</param>
		public void AddRange(IEnumerable<Type<#= i + 1 #>> collectionToAdd)
		{
			foreach (var item in collectionToAdd)
			{
				this.Add(item);
			}
		}
<#
}
if(numberOfArguments != maxNumberOfTypeArguments)
{
#>
		/// <summary>
		/// Merges a type into the existing discriminated union list. 
		/// </summary>
		/// <typeparam name="TypeToMerge">The type of the items to merge.</typeparam>
		/// <param name="toMerge">The Items to merge.</param>
		/// <returns></returns>
		public DiscriminatedUnionWithBaseList<<#= TypeArgumentsFor(numberOfArguments) #>, TypeToMerge, BaseType> Merge<TypeToMerge>(IEnumerable<TypeToMerge> toMerge)
			where TypeToMerge : BaseType
		{
			var result = new DiscriminatedUnionWithBaseList<<#= TypeArgumentsFor(numberOfArguments) #>, TypeToMerge, BaseType>();
			this.ForEach(item => item.Match(
			<#for(var i = 0; i < numberOfArguments -1; i +=1)
{
#>
				Type<#= i + 1 #>Item => result.Add(Type<#= i + 1 #>Item),
				<#
}
#>
				Type<#= numberOfArguments #>Item => result.Add(Type<#= numberOfArguments #>Item)
				));
	
			foreach(var item in toMerge)
			{
				result.Add(item);
			}

			return result;
		}
<#
}
#>
	}
<#

}
#>
}

<#@ include file="GenerationHelpers.txt" #>