<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

namespace FunctionalSharp.DiscriminatedUnions
{
	using System;
	using System.ComponentModel;
<#
var maxNumberOfTypeArguments = 10;
#><#
for(var numberOfArguments = 2; numberOfArguments <= maxNumberOfTypeArguments; numberOfArguments +=1)
{
#>
	/// <summary>
	/// A Discriminated union for <#= numberOfArguments #> types.
	/// </summary>
<#= TypeParamsFor(numberOfArguments) #>
	[Serializable]
	public class DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments) #>>
	{
		/// <summary>
		/// Private constructor to support serialization.
		/// </summary>
		protected DiscriminatedUnion() { }

		/// <summary>
		/// The tag indicating what item is actually stored.
		/// </summary>
		protected int tag;

		/// <summary>
		/// Runs Actions for the matched types.
		/// </summary>
		public DiscriminatedUnion(object value)
		{
			if(value.GetType() == typeof(Type1))
			{
				Item1 = (Type1)value; 
				tag = 1; 
			}
<#for(var i = 1; i < numberOfArguments; i +=1)
{
#>			else if(value.GetType() == typeof(Type<#= i#>))
			{
				Item<#= i #> = (Type<#= i#>)value; 
				tag = <#= i #>; 
			}
<#
}
#>			else
			{
				throw new InvalidEnumArgumentException("Unrecognized tag value: " + tag);
			}
		}

<#for(var i = 0; i < numberOfArguments; i +=1)
{
#>
		/// <summary>
		/// Creates a new Discriminated union of with <typeparamref name="Type<#= i + 1 #>"/>
		/// </summary>
		/// <param name="item"></param>
		public DiscriminatedUnion(Type<#= i + 1 #> item) { Item<#= i + 1 #> = item; tag = <#= i #>; }
		
		/// <summary>
		/// The storage for type<#= i + 1 #>.
		/// </summary>
		protected readonly Type<#= i + 1 #> Item<#= i + 1 #>;
<#
}
#>

		/// <summary>
		/// Transforms the union into a new type using the given functions for the transformation.
		/// </summary>
		/// <typeparam name="ReturnType"></typeparam>
<#for(var i = 0; i < numberOfArguments; i +=1)
{
#>
		/// <param name="Function<#= i + 1 #>">Function to run for <typeparamref name="Type<#= i + 1 #>"/></param>
<#
}#>		/// <returns></returns>
		public ReturnType Match<ReturnType>(<#= FunctionArgumentsFor(numberOfArguments) #>)
		{
			switch (tag)
			{
<#for(var i = 0; i < numberOfArguments; i +=1)
{
#>				case <#= i#>: return Function<#= i+1 #>(Item<#= i + 1 #>);
<#
}
#>
				default: throw new InvalidEnumArgumentException("Unrecognized tag value: " + tag);
			}
		}

		/// <summary>
		/// Runs Actions for the matched types.
		/// </summary>
<#for(var i = 0; i < numberOfArguments; i +=1)
{
#>
		/// <param name="Action<#= i+1 #>">Action to run for <typeparamref name="Type<#= i+1 #>"/></param>
<#
}
#>		public void Match(<#= ActionArgumentsFor(numberOfArguments) #>)
		{
			switch (tag)
			{
<#for(var i = 0; i < numberOfArguments; i +=1)
{
#>				case <#= i#>: Action<#= i+1 #>(Item<#= i + 1 #>); break;
<#
}
#>
				default: throw new InvalidEnumArgumentException("Unrecognized tag value: " + tag);
			}
		}
	}<#
}
#>
}

<#@ include file="GenerationHelpers.txt" #>